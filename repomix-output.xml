This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitattributes
.gitignore
android/.gitignore
android/app/build.gradle
android/app/proguard-rules.pro
android/app/src/debug/AndroidManifest.xml
android/app/src/main/AndroidManifest.xml
android/app/src/main/java/com/whatsuproukayachelly/MainActivity.kt
android/app/src/main/java/com/whatsuproukayachelly/MainApplication.kt
android/app/src/main/res/drawable/ic_launcher_background.xml
android/app/src/main/res/drawable/rn_edit_text_material.xml
android/app/src/main/res/values/colors.xml
android/app/src/main/res/values/strings.xml
android/app/src/main/res/values/styles.xml
android/build.gradle
android/gradle.properties
android/gradle/wrapper/gradle-wrapper.properties
android/gradlew
android/gradlew.bat
android/settings.gradle
App.js
app.json
Config/index.js
index.js
ios/.gitignore
ios/.xcode.env
ios/Podfile
ios/Podfile.properties.json
ios/WhatsUpRoukayaChelly.xcodeproj/project.pbxproj
ios/WhatsUpRoukayaChelly.xcodeproj/project.xcworkspace/contents.xcworkspacedata
ios/WhatsUpRoukayaChelly.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
ios/WhatsUpRoukayaChelly.xcodeproj/xcshareddata/xcschemes/WhatsUpRoukayaChelly.xcscheme
ios/WhatsUpRoukayaChelly/AppDelegate.swift
ios/WhatsUpRoukayaChelly/Images.xcassets/AppIcon.appiconset/Contents.json
ios/WhatsUpRoukayaChelly/Images.xcassets/Contents.json
ios/WhatsUpRoukayaChelly/Info.plist
ios/WhatsUpRoukayaChelly/SplashScreen.storyboard
ios/WhatsUpRoukayaChelly/Supporting/Expo.plist
ios/WhatsUpRoukayaChelly/WhatsUpRoukayaChelly-Bridging-Header.h
metro.config.js
package.json
Screens/Auth.js
Screens/Chat.js
Screens/Home.js
Screens/Home/Groups.js
Screens/Home/ListProfils.js
Screens/Home/MyAccount.js
Screens/NewUser.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="ios/WhatsUpRoukayaChelly.xcodeproj/project.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>
</file>

<file path="ios/WhatsUpRoukayaChelly.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path=".gitattributes">
*.pbxproj -text
</file>

<file path=".gitignore">
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo
</file>

<file path="android/.gitignore">
# OSX
#
.DS_Store

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml
*.hprof
.cxx/

# Bundle artifacts
*.jsbundle
</file>

<file path="android/app/build.gradle">
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.whatsuproukayachelly"
    defaultConfig {
        applicationId "com.whatsuproukayachelly"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
</file>

<file path="android/app/proguard-rules.pro">
# Add project specific ProGuard rules here.
# By default, the flags in this file are appended to flags specified
# in /usr/local/Cellar/android-sdk/24.3.3/tools/proguard/proguard-android.txt
# You can edit the include path and order by changing the proguardFiles
# directive in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# react-native-reanimated
-keep class com.swmansion.reanimated.** { *; }
-keep class com.facebook.react.turbomodule.** { *; }

# Add any project specific keep options here:
</file>

<file path="android/app/src/debug/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>

    <application android:usesCleartextTraffic="true" tools:targetApi="28" tools:ignore="GoogleAppIndexingWarning" tools:replace="android:usesCleartextTraffic" />
</manifest>
</file>

<file path="android/app/src/main/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

  <uses-permission android:name="android.permission.INTERNET"/>
  <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->
  <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
  <uses-permission android:name="android.permission.VIBRATE"/>
  <!-- These require runtime permissions on M -->
  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
  <!-- END OPTIONAL PERMISSIONS -->

  <queries>
    <!-- Support checking for http(s) links via the Linking API -->
    <intent>
      <action android:name="android.intent.action.VIEW" />
      <category android:name="android.intent.category.BROWSABLE" />
      <data android:scheme="https" />
    </intent>
  </queries>

  <application android:name=".MainApplication" android:label="@string/app_name" android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round" android:allowBackup="false" android:theme="@style/AppTheme" android:supportsRtl="true">
    <activity android:name=".MainActivity" android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|uiMode" android:launchMode="singleTask" android:windowSoftInputMode="adjustResize" android:theme="@style/Theme.App.SplashScreen" android:exported="true">
      <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
      </intent-filter>
    </activity>
  </application>
</manifest>
</file>

<file path="android/app/src/main/java/com/whatsuproukayachelly/MainActivity.kt">
package com.whatsuproukayachelly

import android.os.Build
import android.os.Bundle

import com.facebook.react.ReactActivity
import com.facebook.react.ReactActivityDelegate
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled
import com.facebook.react.defaults.DefaultReactActivityDelegate

import expo.modules.ReactActivityDelegateWrapper

class MainActivity : ReactActivity() {
  override fun onCreate(savedInstanceState: Bundle?) {
    // Set the theme to AppTheme BEFORE onCreate to support
    // coloring the background, status bar, and navigation bar.
    // This is required for expo-splash-screen.
    setTheme(R.style.AppTheme);
    super.onCreate(null)
  }

  /**
   * Returns the name of the main component registered from JavaScript. This is used to schedule
   * rendering of the component.
   */
  override fun getMainComponentName(): String = "main"

  /**
   * Returns the instance of the [ReactActivityDelegate]. We use [DefaultReactActivityDelegate]
   * which allows you to enable New Architecture with a single boolean flags [fabricEnabled]
   */
  override fun createReactActivityDelegate(): ReactActivityDelegate {
    return ReactActivityDelegateWrapper(
          this,
          BuildConfig.IS_NEW_ARCHITECTURE_ENABLED,
          object : DefaultReactActivityDelegate(
              this,
              mainComponentName,
              fabricEnabled
          ){})
  }

  /**
    * Align the back button behavior with Android S
    * where moving root activities to background instead of finishing activities.
    * @see <a href="https://developer.android.com/reference/android/app/Activity#onBackPressed()">onBackPressed</a>
    */
  override fun invokeDefaultOnBackPressed() {
      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.R) {
          if (!moveTaskToBack(false)) {
              // For non-root activities, use the default implementation to finish them.
              super.invokeDefaultOnBackPressed()
          }
          return
      }

      // Use the default back button implementation on Android S
      // because it's doing more than [Activity.moveTaskToBack] in fact.
      super.invokeDefaultOnBackPressed()
  }
}
</file>

<file path="android/app/src/main/java/com/whatsuproukayachelly/MainApplication.kt">
package com.whatsuproukayachelly

import android.app.Application
import android.content.res.Configuration

import com.facebook.react.PackageList
import com.facebook.react.ReactApplication
import com.facebook.react.ReactNativeHost
import com.facebook.react.ReactPackage
import com.facebook.react.ReactHost
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load
import com.facebook.react.defaults.DefaultReactNativeHost
import com.facebook.react.soloader.OpenSourceMergedSoMapping
import com.facebook.soloader.SoLoader

import expo.modules.ApplicationLifecycleDispatcher
import expo.modules.ReactNativeHostWrapper

class MainApplication : Application(), ReactApplication {

  override val reactNativeHost: ReactNativeHost = ReactNativeHostWrapper(
        this,
        object : DefaultReactNativeHost(this) {
          override fun getPackages(): List<ReactPackage> {
            val packages = PackageList(this).packages
            // Packages that cannot be autolinked yet can be added manually here, for example:
            // packages.add(new MyReactNativePackage());
            return packages
          }

          override fun getJSMainModuleName(): String = ".expo/.virtual-metro-entry"

          override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG

          override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED
          override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED
      }
  )

  override val reactHost: ReactHost
    get() = ReactNativeHostWrapper.createReactHost(applicationContext, reactNativeHost)

  override fun onCreate() {
    super.onCreate()
    SoLoader.init(this, OpenSourceMergedSoMapping)
    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {
      // If you opted-in for the New Architecture, we load the native entry point for this app.
      load()
    }
    ApplicationLifecycleDispatcher.onApplicationCreate(this)
  }

  override fun onConfigurationChanged(newConfig: Configuration) {
    super.onConfigurationChanged(newConfig)
    ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)
  }
}
</file>

<file path="android/app/src/main/res/drawable/ic_launcher_background.xml">
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
  <item android:drawable="@color/splashscreen_background"/>
  <item>
    <bitmap android:gravity="center" android:src="@drawable/splashscreen_logo"/>
  </item>
</layer-list>
</file>

<file path="android/app/src/main/res/drawable/rn_edit_text_material.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (C) 2014 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<inset xmlns:android="http://schemas.android.com/apk/res/android"
       android:insetLeft="@dimen/abc_edit_text_inset_horizontal_material"
       android:insetRight="@dimen/abc_edit_text_inset_horizontal_material"
       android:insetTop="@dimen/abc_edit_text_inset_top_material"
       android:insetBottom="@dimen/abc_edit_text_inset_bottom_material"
       >

    <selector>
        <!--
          This file is a copy of abc_edit_text_material (https://bit.ly/3k8fX7I).
          The item below with state_pressed="false" and state_focused="false" causes a NullPointerException.
          NullPointerException:tempt to invoke virtual method 'android.graphics.drawable.Drawable android.graphics.drawable.Drawable$ConstantState.newDrawable(android.content.res.Resources)'

          <item android:state_pressed="false" android:state_focused="false" android:drawable="@drawable/abc_textfield_default_mtrl_alpha"/>

          For more info, see https://bit.ly/3CdLStv (react-native/pull/29452) and https://bit.ly/3nxOMoR.
        -->
        <item android:state_enabled="false" android:drawable="@drawable/abc_textfield_default_mtrl_alpha"/>
        <item android:drawable="@drawable/abc_textfield_activated_mtrl_alpha"/>
    </selector>

</inset>
</file>

<file path="android/app/src/main/res/values/colors.xml">
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<resources>
  <color name="splashscreen_background">#FFFFFF</color>
</resources>
</file>

<file path="android/app/src/main/res/values/strings.xml">
<resources>
    <string name="app_name">WhatsUp_RoukayaChelly</string>
</resources>
</file>

<file path="android/app/src/main/res/values/styles.xml">
<resources>
  <style name="AppTheme" parent="Theme.AppCompat.DayNight.NoActionBar">
    <item name="android:editTextBackground">@drawable/rn_edit_text_material</item>
  </style>
  <style name="Theme.App.SplashScreen" parent="AppTheme">
    <item name="android:windowBackground">@drawable/splashscreen_logo</item>
  </style>
</resources>
</file>

<file path="android/build.gradle">
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  repositories {
    google()
    mavenCentral()
  }
  dependencies {
    classpath('com.android.tools.build:gradle')
    classpath('com.facebook.react:react-native-gradle-plugin')
    classpath('org.jetbrains.kotlin:kotlin-gradle-plugin')
  }
}

def reactNativeAndroidDir = new File(
  providers.exec {
    workingDir(rootDir)
    commandLine("node", "--print", "require.resolve('react-native/package.json')")
  }.standardOutput.asText.get().trim(),
  "../android"
)

allprojects {
  repositories {
    maven {
      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
      url(reactNativeAndroidDir)
    }

    google()
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
  }
}

apply plugin: "expo-root-project"
apply plugin: "com.facebook.react.rootproject"
</file>

<file path="android/gradle.properties">
# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Default value: -Xmx512m -XX:MaxMetaspaceSize=256m
org.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=512m

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true

# Enable AAPT2 PNG crunching
android.enablePngCrunchInReleaseBuilds=true

# Use this property to specify which architecture you want to build.
# You can also override it from the CLI using
# ./gradlew <task> -PreactNativeArchitectures=x86_64
reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64

# Use this property to enable support to the new architecture.
# This will allow you to use TurboModules and the Fabric render in
# your application. You should enable this flag either if you want
# to write custom TurboModules/Fabric components OR use libraries that
# are providing them.
newArchEnabled=true

# Use this property to enable or disable the Hermes JS engine.
# If set to false, you will be using JSC instead.
hermesEnabled=true

# Enable GIF support in React Native images (~200 B increase)
expo.gif.enabled=true
# Enable webp support in React Native images (~85 KB increase)
expo.webp.enabled=true
# Enable animated webp support (~3.4 MB increase)
# Disabled by default because iOS doesn't support animated webp
expo.webp.animated=false

# Enable network inspector
EX_DEV_CLIENT_NETWORK_INSPECTOR=true

# Use legacy packaging to compress native libraries in the resulting APK.
expo.useLegacyPackaging=false
</file>

<file path="android/gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="android/gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="android/gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="android/settings.gradle">
pluginManagement {
  def reactNativeGradlePlugin = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })")
    }.standardOutput.asText.get().trim()
  ).getParentFile().absolutePath
  includeBuild(reactNativeGradlePlugin)
  
  def expoPluginsPath = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('expo-modules-autolinking/package.json', { paths: [require.resolve('expo/package.json')] })")
    }.standardOutput.asText.get().trim(),
    "../android/expo-gradle-plugin"
  ).absolutePath
  includeBuild(expoPluginsPath)
}

plugins {
  id("com.facebook.react.settings")
  id("expo-autolinking-settings")
}

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    ex.autolinkLibrariesFromCommand(expoAutolinking.rnConfigCommand)
  }
}
expoAutolinking.useExpoModules()

rootProject.name = 'WhatsUpRoukayaChelly'

expoAutolinking.useExpoVersionCatalog()

include ':app'
includeBuild(expoAutolinking.reactNativeGradlePlugin)
</file>

<file path="app.json">
{
  "expo": {
    "name": "WhatsUp_RoukayaChelly",
    "slug": "WhatsUp_RoukayaChelly",
    "version": "1.0.0"
  }
}
</file>

<file path="index.js">
import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);
</file>

<file path="ios/.gitignore">
# OSX
#
.DS_Store

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
project.xcworkspace
.xcode.env.local

# Bundle artifacts
*.jsbundle

# CocoaPods
/Pods/
</file>

<file path="ios/.xcode.env">
# This `.xcode.env` file is versioned and is used to source the environment
# used when running script phases inside Xcode.
# To customize your local environment, you can create an `.xcode.env.local`
# file that is not versioned.

# NODE_BINARY variable contains the PATH to the node executable.
#
# Customize the NODE_BINARY variable here.
# For example, to use nvm with brew, add the following line
# . "$(brew --prefix nvm)/nvm.sh" --no-use
export NODE_BINARY=$(command -v node)
</file>

<file path="ios/Podfile">
require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'WhatsUpRoukayaChelly' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end
end
</file>

<file path="ios/Podfile.properties.json">
{
  "expo.jsEngine": "hermes",
  "EX_DEV_CLIENT_NETWORK_INSPECTOR": "true"
}
</file>

<file path="ios/WhatsUpRoukayaChelly.xcodeproj/project.pbxproj">
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXBuildFile section */
		13B07FBF1A68108700A75B9A /* Images.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 13B07FB51A68108700A75B9A /* Images.xcassets */; };
		3E461D99554A48A4959DE609 /* SplashScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = AA286B85B6C04FC6940260E9 /* SplashScreen.storyboard */; };
		BB2F792D24A3F905000567C9 /* Expo.plist in Resources */ = {isa = PBXBuildFile; fileRef = BB2F792C24A3F905000567C9 /* Expo.plist */; };
		F11748422D0307B40044C1D9 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = F11748412D0307B40044C1D9 /* AppDelegate.swift */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		13B07F961A680F5B00A75B9A /* WhatsUpRoukayaChelly.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = WhatsUpRoukayaChelly.app; sourceTree = BUILT_PRODUCTS_DIR; };
		13B07FB51A68108700A75B9A /* Images.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; name = Images.xcassets; path = WhatsUpRoukayaChelly/Images.xcassets; sourceTree = "<group>"; };
		13B07FB61A68108700A75B9A /* Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = Info.plist; path = WhatsUpRoukayaChelly/Info.plist; sourceTree = "<group>"; };
		AA286B85B6C04FC6940260E9 /* SplashScreen.storyboard */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.storyboard; name = SplashScreen.storyboard; path = WhatsUpRoukayaChelly/SplashScreen.storyboard; sourceTree = "<group>"; };
		BB2F792C24A3F905000567C9 /* Expo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = Expo.plist; sourceTree = "<group>"; };
		ED297162215061F000B7C4FE /* JavaScriptCore.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = JavaScriptCore.framework; path = System/Library/Frameworks/JavaScriptCore.framework; sourceTree = SDKROOT; };
		F11748412D0307B40044C1D9 /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; name = AppDelegate.swift; path = WhatsUpRoukayaChelly/AppDelegate.swift; sourceTree = "<group>"; };
		F11748442D0722820044C1D9 /* WhatsUpRoukayaChelly-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; name = "WhatsUpRoukayaChelly-Bridging-Header.h"; path = "WhatsUpRoukayaChelly/WhatsUpRoukayaChelly-Bridging-Header.h"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		13B07F8C1A680F5B00A75B9A /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		13B07FAE1A68108700A75B9A /* WhatsUpRoukayaChelly */ = {
			isa = PBXGroup;
			children = (
				F11748412D0307B40044C1D9 /* AppDelegate.swift */,
				F11748442D0722820044C1D9 /* WhatsUpRoukayaChelly-Bridging-Header.h */,
				BB2F792B24A3F905000567C9 /* Supporting */,
				13B07FB51A68108700A75B9A /* Images.xcassets */,
				13B07FB61A68108700A75B9A /* Info.plist */,
				AA286B85B6C04FC6940260E9 /* SplashScreen.storyboard */,
			);
			name = WhatsUpRoukayaChelly;
			sourceTree = "<group>";
		};
		2D16E6871FA4F8E400B85C8A /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				ED297162215061F000B7C4FE /* JavaScriptCore.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		832341AE1AAA6A7D00B99B32 /* Libraries */ = {
			isa = PBXGroup;
			children = (
			);
			name = Libraries;
			sourceTree = "<group>";
		};
		83CBB9F61A601CBA00E9B192 = {
			isa = PBXGroup;
			children = (
				13B07FAE1A68108700A75B9A /* WhatsUpRoukayaChelly */,
				832341AE1AAA6A7D00B99B32 /* Libraries */,
				83CBBA001A601CBA00E9B192 /* Products */,
				2D16E6871FA4F8E400B85C8A /* Frameworks */,
			);
			indentWidth = 2;
			sourceTree = "<group>";
			tabWidth = 2;
			usesTabs = 0;
		};
		83CBBA001A601CBA00E9B192 /* Products */ = {
			isa = PBXGroup;
			children = (
				13B07F961A680F5B00A75B9A /* WhatsUpRoukayaChelly.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		BB2F792B24A3F905000567C9 /* Supporting */ = {
			isa = PBXGroup;
			children = (
				BB2F792C24A3F905000567C9 /* Expo.plist */,
			);
			name = Supporting;
			path = WhatsUpRoukayaChelly/Supporting;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		13B07F861A680F5B00A75B9A /* WhatsUpRoukayaChelly */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 13B07F931A680F5B00A75B9A /* Build configuration list for PBXNativeTarget "WhatsUpRoukayaChelly" */;
			buildPhases = (
				08A4A3CD28434E44B6B9DE2E /* [CP] Check Pods Manifest.lock */,
				13B07F871A680F5B00A75B9A /* Sources */,
				13B07F8C1A680F5B00A75B9A /* Frameworks */,
				13B07F8E1A680F5B00A75B9A /* Resources */,
				00DD1BFF1BD5951E006B06BC /* Bundle React Native code and images */,
				800E24972A6A228C8D4807E9 /* [CP] Copy Pods Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = WhatsUpRoukayaChelly;
			productName = WhatsUpRoukayaChelly;
			productReference = 13B07F961A680F5B00A75B9A /* WhatsUpRoukayaChelly.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		83CBB9F71A601CBA00E9B192 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1130;
				TargetAttributes = {
					13B07F861A680F5B00A75B9A = {
						LastSwiftMigration = 1250;
					};
				};
			};
			buildConfigurationList = 83CBB9FA1A601CBA00E9B192 /* Build configuration list for PBXProject "WhatsUpRoukayaChelly" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 83CBB9F61A601CBA00E9B192;
			productRefGroup = 83CBBA001A601CBA00E9B192 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				13B07F861A680F5B00A75B9A /* WhatsUpRoukayaChelly */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		13B07F8E1A680F5B00A75B9A /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				BB2F792D24A3F905000567C9 /* Expo.plist in Resources */,
				13B07FBF1A68108700A75B9A /* Images.xcassets in Resources */,
				3E461D99554A48A4959DE609 /* SplashScreen.storyboard in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		00DD1BFF1BD5951E006B06BC /* Bundle React Native code and images */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Bundle React Native code and images";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n# Source .xcode.env.updates if it exists to allow\n# SKIP_BUNDLING to be unset if needed\nif [[ -f \"$PODS_ROOT/../.xcode.env.updates\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.updates\"\nfi\n# Source local changes to allow overrides\n# if needed\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n\n";
		};
		08A4A3CD28434E44B6B9DE2E /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-WhatsUpRoukayaChelly-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		800E24972A6A228C8D4807E9 /* [CP] Copy Pods Resources */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-WhatsUpRoukayaChelly/Pods-WhatsUpRoukayaChelly-resources.sh",
				"${PODS_CONFIGURATION_BUILD_DIR}/EXConstants/EXConstants.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/EXUpdates/EXUpdates.bundle",
				"${PODS_CONFIGURATION_BUILD_DIR}/React-Core/RCTI18nStrings.bundle",
			);
			name = "[CP] Copy Pods Resources";
			outputPaths = (
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/EXConstants.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/EXUpdates.bundle",
				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/RCTI18nStrings.bundle",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-WhatsUpRoukayaChelly/Pods-WhatsUpRoukayaChelly-resources.sh\"\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		13B07F871A680F5B00A75B9A /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F11748422D0307B40044C1D9 /* AppDelegate.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		13B07F941A680F5B00A75B9A /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = 1;
				ENABLE_BITCODE = NO;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"$(inherited)",
					"FB_SONARKIT_ENABLED=1",
				);
				INFOPLIST_FILE = WhatsUpRoukayaChelly/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-ObjC",
					"-lc++",
				);
				PRODUCT_BUNDLE_IDENTIFIER = org.name.WhatsUpRoukayaChelly;
				PRODUCT_NAME = WhatsUpRoukayaChelly;
				SWIFT_OBJC_BRIDGING_HEADER = "WhatsUpRoukayaChelly/WhatsUpRoukayaChelly-Bridging-Header.h";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Debug;
		};
		13B07F951A680F5B00A75B9A /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = 1;
				INFOPLIST_FILE = WhatsUpRoukayaChelly/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				OTHER_LDFLAGS = (
					"$(inherited)",
					"-ObjC",
					"-lc++",
				);
				PRODUCT_BUNDLE_IDENTIFIER = org.name.WhatsUpRoukayaChelly;
				PRODUCT_NAME = WhatsUpRoukayaChelly;
				SWIFT_OBJC_BRIDGING_HEADER = "WhatsUpRoukayaChelly/WhatsUpRoukayaChelly-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Release;
		};
		83CBBA201A601CBA00E9B192 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "c++20";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
				LD_RUNPATH_SEARCH_PATHS = (
					/usr/lib/swift,
					"$(inherited)",
				);
				LIBRARY_SEARCH_PATHS = "\"$(inherited)\"";
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		83CBBA211A601CBA00E9B192 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "c++20";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = YES;
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 15.1;
				LD_RUNPATH_SEARCH_PATHS = (
					/usr/lib/swift,
					"$(inherited)",
				);
				LIBRARY_SEARCH_PATHS = "\"$(inherited)\"";
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		13B07F931A680F5B00A75B9A /* Build configuration list for PBXNativeTarget "WhatsUpRoukayaChelly" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				13B07F941A680F5B00A75B9A /* Debug */,
				13B07F951A680F5B00A75B9A /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		83CBB9FA1A601CBA00E9B192 /* Build configuration list for PBXProject "WhatsUpRoukayaChelly" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				83CBBA201A601CBA00E9B192 /* Debug */,
				83CBBA211A601CBA00E9B192 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 83CBB9F71A601CBA00E9B192 /* Project object */;
}
</file>

<file path="ios/WhatsUpRoukayaChelly.xcodeproj/xcshareddata/xcschemes/WhatsUpRoukayaChelly.xcscheme">
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1130"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
               BuildableName = "WhatsUpRoukayaChelly.app"
               BlueprintName = "WhatsUpRoukayaChelly"
               ReferencedContainer = "container:WhatsUpRoukayaChelly.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
         <TestableReference
            skipped = "NO">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "00E356ED1AD99517003FC87E"
               BuildableName = "WhatsUpRoukayaChellyTests.xctest"
               BlueprintName = "WhatsUpRoukayaChellyTests"
               ReferencedContainer = "container:WhatsUpRoukayaChelly.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
            BuildableName = "WhatsUpRoukayaChelly.app"
            BlueprintName = "WhatsUpRoukayaChelly"
            ReferencedContainer = "container:WhatsUpRoukayaChelly.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
            BuildableName = "WhatsUpRoukayaChelly.app"
            BlueprintName = "WhatsUpRoukayaChelly"
            ReferencedContainer = "container:WhatsUpRoukayaChelly.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
</file>

<file path="ios/WhatsUpRoukayaChelly/AppDelegate.swift">
import Expo
import React
import ReactAppDependencyProvider

@UIApplicationMain
public class AppDelegate: ExpoAppDelegate {
  var window: UIWindow?

  var reactNativeDelegate: ExpoReactNativeFactoryDelegate?
  var reactNativeFactory: RCTReactNativeFactory?

  public override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil
  ) -> Bool {
    let delegate = ReactNativeDelegate()
    let factory = ExpoReactNativeFactory(delegate: delegate)
    delegate.dependencyProvider = RCTAppDependencyProvider()

    reactNativeDelegate = delegate
    reactNativeFactory = factory
    bindReactNativeFactory(factory)

#if os(iOS) || os(tvOS)
    window = UIWindow(frame: UIScreen.main.bounds)
    factory.startReactNative(
      withModuleName: "main",
      in: window,
      launchOptions: launchOptions)
#endif

    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }

  // Linking API
  public override func application(
    _ app: UIApplication,
    open url: URL,
    options: [UIApplication.OpenURLOptionsKey: Any] = [:]
  ) -> Bool {
    return super.application(app, open: url, options: options) || RCTLinkingManager.application(app, open: url, options: options)
  }

  // Universal Links
  public override func application(
    _ application: UIApplication,
    continue userActivity: NSUserActivity,
    restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void
  ) -> Bool {
    let result = RCTLinkingManager.application(application, continue: userActivity, restorationHandler: restorationHandler)
    return super.application(application, continue: userActivity, restorationHandler: restorationHandler) || result
  }
}

class ReactNativeDelegate: ExpoReactNativeFactoryDelegate {
  // Extension point for config-plugins

  override func sourceURL(for bridge: RCTBridge) -> URL? {
    // needed to return the correct URL for expo-dev-client.
    bridge.bundleURL ?? bundleURL()
  }

  override func bundleURL() -> URL? {
#if DEBUG
    return RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: ".expo/.virtual-metro-entry")
#else
    return Bundle.main.url(forResource: "main", withExtension: "jsbundle")
#endif
  }
}
</file>

<file path="ios/WhatsUpRoukayaChelly/Images.xcassets/AppIcon.appiconset/Contents.json">
{
  "images" : [
    {
      "idiom" : "universal",
      "platform" : "ios",
      "size" : "1024x1024"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "expo"
  }
}
</file>

<file path="ios/WhatsUpRoukayaChelly/Images.xcassets/Contents.json">
{
  "info" : {
    "version" : 1,
    "author" : "expo"
  }
}
</file>

<file path="ios/WhatsUpRoukayaChelly/Info.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CADisableMinimumFrameDurationOnPhone</key>
	<true/>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>1</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>LSMinimumSystemVersion</key>
	<string>12.0</string>
	<key>NSAppTransportSecurity</key>
	<dict>
		<key>NSAllowsArbitraryLoads</key>
		<false/>
		<key>NSAllowsLocalNetworking</key>
		<true/>
	</dict>
	<key>UILaunchStoryboardName</key>
	<string>SplashScreen</string>
	<key>UIRequiredDeviceCapabilities</key>
	<array>
		<string>arm64</string>
	</array>
	<key>UIStatusBarStyle</key>
	<string>UIStatusBarStyleDefault</string>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UIViewControllerBasedStatusBarAppearance</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/WhatsUpRoukayaChelly/SplashScreen.storyboard">
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="32700.99.1234" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="EXPO-VIEWCONTROLLER-1">
    <device id="retina6_12" orientation="portrait" appearance="light"/>
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="22685"/>
        <capability name="Named colors" minToolsVersion="9.0"/>
        <capability name="Safe area layout guides" minToolsVersion="9.0"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="EXPO-SCENE-1">
            <objects>
                <viewController storyboardIdentifier="SplashScreenViewController" id="EXPO-VIEWCONTROLLER-1" sceneMemberID="viewController">
                    <view key="view" userInteractionEnabled="NO" contentMode="scaleToFill" insetsLayoutMarginsFromSafeArea="NO" id="EXPO-ContainerView" userLabel="ContainerView">
                        <rect key="frame" x="0.0" y="0.0" width="393" height="852"/>
                        <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
                        <subviews>
                            <imageView clipsSubviews="YES" userInteractionEnabled="NO" contentMode="scaleAspectFit" horizontalHuggingPriority="251" verticalHuggingPriority="251" image="SplashScreen" translatesAutoresizingMaskIntoConstraints="NO" id="EXPO-SplashScreen" userLabel="SplashScreen">
                                <rect key="frame" x="146.66666666666666" y="381" width="100" height="90.333333333333314"/>
                                <accessibility key="accessibilityConfiguration">
                                    <accessibilityTraits key="traits" image="YES" notEnabled="YES"/>
                                </accessibility>
                            </imageView>
                        </subviews>
                        <viewLayoutGuide key="safeArea" id="Rmq-lb-GrQ"/>
                        <constraints>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="centerY" secondItem="EXPO-ContainerView" secondAttribute="centerY" id="0VC-Wk-OaO"/>
                            <constraint firstItem="EXPO-SplashScreen" firstAttribute="centerX" secondItem="EXPO-ContainerView" secondAttribute="centerX" id="zR4-NK-mVN"/>
                        </constraints>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="EXPO-PLACEHOLDER-1" userLabel="First Responder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="0.0" y="0.0"/>
        </scene>
    </scenes>
    <resources>
        <image name="SplashScreenLogo" width="100" height="90.333335876464844"/>
    </resources>
</document>
</file>

<file path="ios/WhatsUpRoukayaChelly/Supporting/Expo.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
</dict>
</plist>
</file>

<file path="ios/WhatsUpRoukayaChelly/WhatsUpRoukayaChelly-Bridging-Header.h">
//
// Use this file to import your target's public headers that you would like to expose to Swift.
//
</file>

<file path="Screens/Home/Groups.js">
import { View, Text } from 'react-native'
import React from 'react'

export default function Groups() {
  return (
    <View>
      <Text>Groups</Text>
    </View>
  )
}
</file>

<file path="Config/index.js">
import firebase from "firebase/compat/app";
import "firebase/compat/auth";
import "firebase/compat/database";

const firebaseConfig = {
  apiKey: "AIzaSyC2aNzt_bI0FsEDZ7QElMn9mMKqYNID8T0",
  authDomain: "whatsup-clone-14122.firebaseapp.com",
  databaseURL: "https://whatsup-clone-14122-default-rtdb.firebaseio.com",
  projectId: "whatsup-clone-14122",
  storageBucket: "whatsup-clone-14122.firebasestorage.app",
  messagingSenderId: "369849720139",
  appId: "1:369849720139:web:260562ab84c929fc009cce",
  measurementId: "G-89D3C5870Q",
};

// Initialize Firebase
if (!firebase.apps.length) {
  firebase.initializeApp(firebaseConfig);
}
export default firebase;

// Supabase configuration (just constants, no client)
export const SUPABASE_URL = "https://qqewhlksmtyuwgaanybi.supabase.co";
export const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFxZXdobGtzbXR5dXdnYWFueWJpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY5Mzc2MTIsImV4cCI6MjA2MjUxMzYxMn0.dgQ91Zp1uBBl1PXNQCAWKW1LfXx90UOhK-NUnYgrz8g";
</file>

<file path="Screens/Chat.js">
import React, { useEffect, useState } from "react";
import {
  Button,
  FlatList,
  ImageBackground,
  StyleSheet,
  Text,
  TextInput,
  View,
  Image,
  Modal,
  Alert,
  Pressable,
  Platform,
  Linking,
  ActionSheetIOS,
  Clipboard,
} from "react-native";
import firebase from "../Config";
import { ref } from "firebase/database";
import * as DocumentPicker from "expo-document-picker";
import * as Location from "expo-location";
import * as ImagePicker from "expo-image-picker";

const database = firebase.database();
const ref_listDiscussions = database.ref().child("List_discussions");
const ref_listaccount = database.ref().child("ListAccounts");

const Chat = (props) => {
  const currentid = props.route.params.currentid;
  const secondid = props.route.params.secondid;
  const discid =
    currentid > secondid ? currentid + secondid : secondid + currentid;
  const ref_lesMessages = ref_listDiscussions.child(discid).child("messages");
  const ref_ladiscussion = ref_listDiscussions.child(discid);
  const ref_istyping = ref_ladiscussion.child("istyping");
  const [Messages, setMessages] = useState([]);
  const [msg, setmsg] = useState("");
  const [istyping, setIstyping] = useState(false);

  // States for user profiles
  const [currentUser, setCurrentUser] = useState({});
  const [secondUser, setSecondUser] = useState({});

  // States for modals
  const [userModalVisible, setUserModalVisible] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [deleteModalVisible, setDeleteModalVisible] = useState(false);
  const [selectedMessage, setSelectedMessage] = useState(null);
  const [reactionModalVisible, setReactionModalVisible] = useState(false);
  const [messageActionVisible, setMessageActionVisible] = useState(false);
  const [mediaItems, setMediaItems] = useState([]);

  // Combined modal state
  const [modalState, setModalState] = useState({
    media: false,
    imagePreview: false,
    previewImage: null,
  });

  // Load user profiles
  useEffect(() => {
    ref_listaccount.child(currentid).on("value", (snapshot) => {
      if (snapshot.exists()) {
        setCurrentUser(snapshot.val());
      }
    });

    ref_listaccount.child(secondid).on("value", (snapshot) => {
      if (snapshot.exists()) {
        setSecondUser(snapshot.val());
      }
    });

    return () => {
      ref_listaccount.child(currentid).off();
      ref_listaccount.child(secondid).off();
    };
  }, []);

  useEffect(() => {
    ref_istyping.on("value", (snapshot) => {
      setIstyping(snapshot.val());
    });
    return () => {
      ref_istyping.off();
    };
  }, []);

  useEffect(() => {
    ref_lesMessages.on("value", (snapshot) => {
      const d = [];
      const media = [];

      snapshot.forEach((un_msg) => {
        const message = {
          id: un_msg.key,
          ...un_msg.val(),
        };

        d.push(message);

        // Collect media items
        if (message.mediaUrl) {
          media.push(message);
        }
      });

      setMessages(d);
      setMediaItems(media);
    });

    return () => {
      ref_lesMessages.off();
    };
  }, []);

  // Function to delete message
  const deleteMessage = (messageId, forEveryone) => {
    if (forEveryone) {
      ref_lesMessages.child(messageId).remove();
    } else {
      ref_lesMessages.child(messageId).update({
        deletedFor: [currentid],
      });
    }
    setDeleteModalVisible(false);
  };

  // Function to add reaction
  const addReaction = (messageId, reaction) => {
    const ref_message = ref_lesMessages.child(messageId);
    ref_message.update({
      reaction: {
        by: currentid,
        type: reaction,
      },
    });
    setReactionModalVisible(false);
  };

  // Function to render reaction emoji
  const renderReaction = (reaction) => {
    if (!reaction) return null;

    let emoji = "";
    switch (reaction.type) {
      case "like":
        emoji = "👍";
        break;
      case "love":
        emoji = "❤️";
        break;
      case "laugh":
        emoji = "😂";
        break;
      case "wow":
        emoji = "😮";
        break;
      case "sad":
        emoji = "😢";
        break;
      case "angry":
        emoji = "😡";
        break;
      default:
        return null;
    }

    return (
      <View style={styles.reactionBadge}>
        <Text style={{ fontSize: 16 }}>{emoji}</Text>
      </View>
    );
  };

  // Function to pick image from gallery
  const pickImage = async () => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.All,
        quality: 1,
      });

      if (!result.canceled && result.assets && result.assets.length > 0) {
        const selectedAsset = result.assets[0];
        const fakeMediaUrl = selectedAsset.uri;

        // Send message with media
        const ref_disc = ref_listDiscussions.child(discid);
        const ref_messages = ref_disc.child("messages");
        const key = ref_messages.push().key;
        const ref_unmsg = ref_messages.child(key);
        ref_unmsg.set({
          body: "Sent a photo",
          time: new Date().toLocaleString(),
          sender: currentid,
          receiver: secondid,
          mediaUrl: fakeMediaUrl,
        });

        Alert.alert("Success", "Image sent successfully!");
      }
    } catch (error) {
      Alert.alert("Error", "Failed to pick image: " + error.message);
    }
  };

  // Function to share location
  const shareLocation = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();

      if (status !== "granted") {
        Alert.alert("Permission Denied", "Location permission is required");
        return;
      }

      const location = await Location.getCurrentPositionAsync({});
      const { latitude, longitude } = location.coords;

      // Send location as message
      const ref_disc = ref_listDiscussions.child(discid);
      const ref_messages = ref_disc.child("messages");
      const key = ref_messages.push().key;
      const ref_unmsg = ref_messages.child(key);
      ref_unmsg.set({
        body: `📍 Location: ${latitude.toFixed(5)}, ${longitude.toFixed(5)}`,
        time: new Date().toLocaleString(),
        sender: currentid,
        receiver: secondid,
        location: { latitude, longitude },
      });

      Alert.alert("Success", "Location shared successfully!");
    } catch (error) {
      Alert.alert("Error", "Failed to get location: " + error.message);
    }
  };

  // Function to copy message to clipboard
  const copyMessage = (message) => {
    Clipboard.setString(message.body);
    Alert.alert("Copied", "Message copied to clipboard");
    setMessageActionVisible(false);
  };

  // Function to show message actions
  const showMessageActions = (message) => {
    setSelectedMessage(message);
    setMessageActionVisible(true);

    // For iOS, use ActionSheet
    if (Platform.OS === "ios") {
      ActionSheetIOS.showActionSheetWithOptions(
        {
          options: ["Cancel", "Copy", "React with emoji", "Delete message"],
          cancelButtonIndex: 0,
          destructiveButtonIndex: 3,
        },
        (buttonIndex) => {
          if (buttonIndex === 1) {
            copyMessage(message);
          } else if (buttonIndex === 2) {
            setReactionModalVisible(true);
          } else if (buttonIndex === 3) {
            setDeleteModalVisible(true);
          }
        }
      );
    }
  };

  return (
    <ImageBackground
      source={require("../assets/bg.jpg")}
      style={styles.container}
    >
      {/* Header */}
      <View style={styles.header}>
        <Pressable
          onPress={() => props.navigation.goBack()}
          style={styles.iconButton}
        >
          <Text style={styles.headerIcon}>←</Text>
        </Pressable>

        <Text style={styles.headerTitle}>{secondUser.pseudo || "Chat"}</Text>

        <Pressable
          onPress={() => setModalState({ ...modalState, media: true })}
          style={styles.iconButton}
        >
          <Text style={styles.headerIcon}>🖼️</Text>
        </Pressable>
      </View>

      <FlatList
        data={Messages}
        renderItem={({ item }) => {
          // Skip deleted messages
          if (item.deletedFor && item.deletedFor.includes(currentid)) {
            return null;
          }

          const color = item.sender === currentid ? "#DCF8C6" : "#FFFFFF";
          const align = item.sender === currentid ? "flex-end" : "flex-start";
          const userInfo = item.sender === currentid ? currentUser : secondUser;

          return (
            <View
              style={{
                flexDirection: align === "flex-start" ? "row" : "row-reverse",
                alignSelf: align,
                margin: 5,
                maxWidth: "85%",
              }}
            >
              {/* User avatar */}
              <Pressable
                onPress={() => {
                  setSelectedUser(userInfo);
                  setUserModalVisible(true);
                }}
                style={{
                  marginHorizontal: 5,
                  alignSelf: "flex-end",
                }}
              >
                <Image
                  source={
                    userInfo.urlImage
                      ? { uri: userInfo.urlImage }
                      : require("../assets/profil.png")
                  }
                  style={styles.avatar}
                />
              </Pressable>

              {/* Message bubble */}
              <Pressable
                onLongPress={() => showMessageActions(item)}
                style={[styles.messageBubble, { backgroundColor: color }]}
              >
                {/* Show media if present */}
                {item.mediaUrl && (
                  <Pressable
                    onPress={() => {
                      setModalState({
                        ...modalState,
                        imagePreview: true,
                        previewImage: item.mediaUrl,
                      });
                    }}
                  >
                    <Image
                      source={{ uri: item.mediaUrl }}
                      style={styles.mediaImage}
                      resizeMode="cover"
                    />
                  </Pressable>
                )}

                {/* Show location if present */}
                {item.location && (
                  <View style={styles.locationBox}>
                    <Text style={styles.locationText}>{item.body}</Text>
                  </View>
                )}

                {!item.location && (
                  <Text style={styles.messageText}>{item.body}</Text>
                )}
                <Text style={styles.timeText}>{item.time}</Text>

                {/* Render reaction if exists */}
                {renderReaction(item.reaction)}
              </Pressable>
            </View>
          );
        }}
        style={styles.messageList}
      />

      {/* Typing indicator */}
      {istyping === secondid && currentid !== secondid && (
        <Text style={styles.typingIndicator}>
          {secondUser.pseudo || "User"} is typing...
        </Text>
      )}

      {/* Input area */}
      <View style={styles.inputContainer}>
        <TextInput
          value={msg}
          onFocus={() => {
            ref_ladiscussion.child("istyping").set(currentid);
          }}
          onBlur={() => {
            ref_ladiscussion.child("istyping").set("");
          }}
          onChangeText={(txt) => {
            setmsg(txt);
          }}
          placeholder=" Type a message..."
          style={styles.input}
        />

        {/* Gallery button */}
        <Pressable onPress={pickImage} style={styles.iconButton}>
          <Text style={styles.iconText}>📷</Text>
        </Pressable>

        {/* Location button */}
        <Pressable onPress={shareLocation} style={styles.iconButton}>
          <Text style={styles.iconText}>📍</Text>
        </Pressable>

        {/* Send button */}
        <Button
          onPress={() => {
            if (!msg || msg.trim() === "") return;

            const ref_disc = ref_listDiscussions.child(discid);
            const ref_messages = ref_disc.child("messages");
            const key = ref_messages.push().key;
            const ref_unmsg = ref_messages.child(key);
            ref_unmsg.set({
              body: msg,
              time: new Date().toLocaleString(),
              sender: currentid,
              receiver: secondid,
            });

            // Clear input after sending
            setmsg("");
          }}
          title="Send"
          color="#128C7E"
        />
      </View>

      {/* User profile modal */}
      <Modal
        visible={userModalVisible}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setUserModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Image
              source={
                selectedUser?.urlImage
                  ? { uri: selectedUser.urlImage }
                  : require("../assets/profil.png")
              }
              style={styles.modalAvatar}
            />

            <Text style={styles.modalTitle}>
              {selectedUser?.pseudo || "User"}
            </Text>

            {selectedUser?.numero && (
              <Text style={styles.modalSubtitle}>
                Phone: {selectedUser.numero}
              </Text>
            )}

            <View style={styles.buttonRow}>
              {selectedUser?.numero && (
                <Button
                  title="Call"
                  color="#4CAF50"
                  onPress={() => {
                    if (Platform.OS === "android") {
                      Linking.openURL(`tel:${selectedUser.numero}`);
                    } else {
                      Linking.openURL(`telprompt:${selectedUser.numero}`);
                    }
                    setUserModalVisible(false);
                  }}
                />
              )}

              <Button
                title="Close"
                color="#F44336"
                onPress={() => setUserModalVisible(false)}
              />
            </View>
          </View>
        </View>
      </Modal>

      {/* Message action modal for Android */}
      {Platform.OS === "android" && (
        <Modal
          visible={messageActionVisible}
          transparent={true}
          animationType="fade"
          onRequestClose={() => setMessageActionVisible(false)}
        >
          <Pressable
            style={styles.modalOverlay}
            onPress={() => setMessageActionVisible(false)}
          >
            <View style={styles.actionSheet}>
              {/* Copy button */}
              <Pressable
                style={styles.actionOption}
                onPress={() => copyMessage(selectedMessage)}
              >
                <Text style={styles.actionText}>📋 Copy message</Text>
              </Pressable>

              <Pressable
                style={styles.actionOption}
                onPress={() => {
                  setMessageActionVisible(false);
                  setReactionModalVisible(true);
                }}
              >
                <Text style={styles.actionText}>😊 React with emoji</Text>
              </Pressable>

              <Pressable
                style={[styles.actionOption, styles.dangerOption]}
                onPress={() => {
                  setMessageActionVisible(false);
                  setDeleteModalVisible(true);
                }}
              >
                <Text style={styles.dangerText}>🗑️ Delete message</Text>
              </Pressable>
            </View>
          </Pressable>
        </Modal>
      )}

      {/* Emoji Reaction modal */}
      <Modal
        visible={reactionModalVisible}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setReactionModalVisible(false)}
      >
        <Pressable
          style={styles.modalOverlay}
          onPress={() => setReactionModalVisible(false)}
        >
          <View style={styles.emojiContainer}>
            <View style={styles.emojiRow}>
              {["like", "love", "laugh"].map((type) => (
                <Pressable
                  key={type}
                  style={styles.emojiButton}
                  onPress={() => addReaction(selectedMessage?.id, type)}
                >
                  <Text style={styles.emoji}>
                    {type === "like" ? "👍" : type === "love" ? "❤️" : "😂"}
                  </Text>
                </Pressable>
              ))}
            </View>

            <View style={styles.emojiRow}>
              {["wow", "sad", "angry"].map((type) => (
                <Pressable
                  key={type}
                  style={styles.emojiButton}
                  onPress={() => addReaction(selectedMessage?.id, type)}
                >
                  <Text style={styles.emoji}>
                    {type === "wow" ? "😮" : type === "sad" ? "😢" : "😡"}
                  </Text>
                </Pressable>
              ))}
            </View>
          </View>
        </Pressable>
      </Modal>

      {/* Delete modal */}
      <Modal
        visible={deleteModalVisible}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setDeleteModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Delete Message</Text>

            <Pressable
              onPress={() => deleteMessage(selectedMessage?.id, false)}
              style={styles.deleteOption}
            >
              <Text style={styles.deleteText}>Delete for me</Text>
            </Pressable>

            <Pressable
              onPress={() => deleteMessage(selectedMessage?.id, true)}
              style={styles.deleteOption}
            >
              <Text style={styles.deleteText}>Delete for everyone</Text>
            </Pressable>

            <Pressable
              style={styles.cancelButton}
              onPress={() => setDeleteModalVisible(false)}
            >
              <Text style={styles.cancelText}>Cancel</Text>
            </Pressable>
          </View>
        </View>
      </Modal>

      {/* Media gallery modal */}
      <Modal
        visible={modalState.media}
        transparent={false}
        animationType="slide"
        onRequestClose={() => setModalState({ ...modalState, media: false })}
      >
        <View style={styles.fullScreenModal}>
          <View style={styles.header}>
            <Pressable
              onPress={() => setModalState({ ...modalState, media: false })}
              style={styles.iconButton}
            >
              <Text style={styles.headerIcon}>←</Text>
            </Pressable>

            <Text style={styles.headerTitle}>Media Gallery</Text>

            <View style={styles.iconButton} />
          </View>

          {mediaItems.length > 0 ? (
            <FlatList
              data={mediaItems}
              numColumns={2}
              renderItem={({ item }) => (
                <Pressable
                  onPress={() => {
                    setModalState({
                      ...modalState,
                      media: false,
                      imagePreview: true,
                      previewImage: item.mediaUrl,
                    });
                  }}
                  style={styles.mediaGridItem}
                >
                  <Image
                    source={{ uri: item.mediaUrl }}
                    style={styles.mediaGridImage}
                    resizeMode="cover"
                  />
                </Pressable>
              )}
              keyExtractor={(item) => item.id}
              contentContainerStyle={{ padding: 10 }}
            />
          ) : (
            <View style={styles.emptyState}>
              <Text style={styles.emptyText}>No media shared in this chat</Text>
            </View>
          )}
        </View>
      </Modal>

      {/* Image Preview Modal */}
      <Modal
        visible={modalState.imagePreview}
        transparent={true}
        animationType="fade"
        onRequestClose={() =>
          setModalState({ ...modalState, imagePreview: false })
        }
      >
        <View style={styles.fullScreenImage}>
          <Pressable
            style={styles.fullScreenImageClose}
            onPress={() =>
              setModalState({ ...modalState, imagePreview: false })
            }
          >
            <Text style={{ color: "white", fontSize: 24 }}>×</Text>
          </Pressable>

          <Image
            source={{ uri: modalState.previewImage }}
            style={styles.fullScreenImageContent}
            resizeMode="contain"
          />
        </View>
      </Modal>
    </ImageBackground>
  );
};

export default Chat;

// Optimized StyleSheet
const styles = StyleSheet.create({
  // Layout & Container Styles
  container: {
    flex: 1,
    backgroundColor: "white",
    alignItems: "center",
    justifyContent: "flex-start",
  },
  fullScreenModal: {
    flex: 1,
    backgroundColor: "white",
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "center",
    alignItems: "center",
  },

  // Header Styles
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    height: 56,
    backgroundColor: "#075E54",
    width: "100%",
    paddingHorizontal: 10,
  },
  headerTitle: {
    flex: 1,
    fontSize: 20,
    color: "white",
    textAlign: "center",
    fontWeight: "bold",
  },
  headerIcon: {
    color: "white",
    fontSize: 22,
  },

  // Message List Styles
  messageList: {
    backgroundColor: "#ECE5DD",
    width: "95%",
  },
  avatar: {
    width: 30,
    height: 30,
    borderRadius: 15,
    borderWidth: 1,
    borderColor: "#ddd",
  },
  messageBubble: {
    padding: 8,
    borderRadius: 10,
    maxWidth: "88%",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 1.5,
    elevation: 2,
    position: "relative",
  },
  messageText: {
    fontSize: 16,
    color: "#000",
  },
  timeText: {
    fontSize: 12,
    color: "#666",
    alignSelf: "flex-end",
    marginTop: 2,
  },
  typingIndicator: {
    color: "#888",
    fontStyle: "italic",
    margin: 5,
  },

  // Input Area Styles
  inputContainer: {
    flexDirection: "row",
    padding: 5,
    backgroundColor: "#F6F6F6",
    width: "100%",
    alignItems: "center",
  },
  input: {
    height: 50,
    flex: 1,
    backgroundColor: "white",
    borderRadius: 25,
    paddingHorizontal: 15,
    marginRight: 5,
    borderWidth: 1,
    borderColor: "#ddd",
  },
  iconButton: {
    width: 40,
    height: 40,
    justifyContent: "center",
    alignItems: "center",
    marginHorizontal: 2,
  },
  iconText: {
    fontSize: 24,
  },

  // Modal Content Styles
  modalContent: {
    width: "80%",
    backgroundColor: "white",
    borderRadius: 15,
    padding: 20,
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#075E54",
    marginBottom: 15,
    textAlign: "center",
  },
  modalSubtitle: {
    fontSize: 16,
    color: "#666",
    marginBottom: 20,
  },
  modalAvatar: {
    width: 80,
    height: 80,
    borderRadius: 40,
    marginBottom: 15,
    borderWidth: 2,
    borderColor: "#075E54",
  },
  buttonRow: {
    flexDirection: "row",
    justifyContent: "space-around",
    width: "100%",
  },

  // Media Styles
  mediaImage: {
    width: 200,
    height: 150,
    borderRadius: 8,
    marginBottom: 8,
  },
  locationBox: {
    backgroundColor: "#E1F5FE",
    padding: 8,
    borderRadius: 8,
    marginBottom: 5,
  },
  locationText: {
    color: "#0288D1",
    fontSize: 14,
  },
  mediaGridItem: {
    flex: 1,
    margin: 5,
    height: 150,
    borderRadius: 10,
    overflow: "hidden",
  },
  mediaGridImage: {
    width: "100%",
    height: "100%",
  },
  emptyState: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  emptyText: {
    fontSize: 16,
    color: "#999",
    textAlign: "center",
  },

  // Image Preview Styles
  fullScreenImage: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.9)",
    justifyContent: "center",
    alignItems: "center",
  },
  fullScreenImageClose: {
    position: "absolute",
    top: 30,
    right: 20,
    zIndex: 10,
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  fullScreenImageContent: {
    width: "100%",
    height: "80%",
  },

  // Reaction Styles
  reactionBadge: {
    position: "absolute",
    bottom: -10,
    right: 10,
    backgroundColor: "white",
    borderRadius: 15,
    paddingHorizontal: 5,
    paddingVertical: 2,
    borderWidth: 1,
    borderColor: "#ddd",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 1.5,
    elevation: 2,
  },
  emojiContainer: {
    backgroundColor: "white",
    borderRadius: 20,
    padding: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
  emojiRow: {
    flexDirection: "row",
    justifyContent: "space-around",
  },
  emojiButton: {
    padding: 10,
    margin: 5,
  },
  emoji: {
    fontSize: 24,
  },

  // Action Sheet Styles
  actionSheet: {
    width: "70%",
    backgroundColor: "white",
    borderRadius: 15,
    overflow: "hidden",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
  actionOption: {
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: "#f1f1f1",
  },
  actionText: {
    fontSize: 16,
    color: "#333",
  },
  dangerOption: {
    backgroundColor: "#FFEBEE",
  },
  dangerText: {
    fontSize: 16,
    color: "#F44336",
  },

  // Delete Modal Styles
  deleteOption: {
    backgroundColor: "#FFEBEE",
    borderRadius: 10,
    padding: 12,
    marginBottom: 10,
    alignItems: "center",
    width: "100%",
  },
  deleteText: {
    color: "#F44336",
    fontSize: 16,
    fontWeight: "500",
  },
  cancelButton: {
    backgroundColor: "#F5F5F5",
    borderRadius: 10,
    padding: 12,
    alignItems: "center",
    marginTop: 5,
    width: "100%",
  },
  cancelText: {
    color: "#757575",
    fontSize: 16,
    fontWeight: "500",
  },
});
</file>

<file path="Screens/Home.js">
import { View, Text } from "react-native";
import React from "react";
import { createMaterialBottomTabNavigator } from "@react-navigation/material-bottom-tabs";
import ListProfils from "./Home/ListProfils";
import Groups from "./Home/Groups";
import MyAccount from "./Home/MyAccount";
import MaterialCommunityIcons from "react-native-vector-icons/MaterialCommunityIcons";

const Tab = createMaterialBottomTabNavigator();

export default function Home(props) {
  const currentUserid = props.route.params.currentUserid;

  return (
    <Tab.Navigator
      barStyle={{
        backgroundColor: "#075E54",
        shadowColor: "#000",
        shadowOffset: { width: 0, height: -1 },
        shadowOpacity: 0.1,
        shadowRadius: 3,
        elevation: 5,
        borderTopWidth: 0,
        height: 65,
      }}
      activeColor="#FFFFFF"
      inactiveColor="#88E4FF"
      labeled={true}
      shifting={true}
    >
      <Tab.Screen
        name="ListProfils"
        component={ListProfils}
        initialParams={{ currentUserid }}
        options={{
          tabBarLabel: "Chats",
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="chat" color={color} size={24} />
          ),
          //when active different color
          tabBarColor: "#075E54",
        }}
      ></Tab.Screen>

      <Tab.Screen
        name="Groups"
        component={Groups}
        options={{
          tabBarLabel: "Groups",
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons
              name="account-group"
              color={color}
              size={24}
            />
          ),

          tabBarColor: "#0E8A7C",
        }}
      ></Tab.Screen>

      <Tab.Screen
        name="MyAccount"
        component={MyAccount}
        initialParams={{ currentUserid }}
        options={{
          tabBarLabel: "Profile",
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons
              name="account-circle"
              color={color}
              size={24}
            />
          ),
          tabBarColor: "#0A766B",
        }}
      ></Tab.Screen>
    </Tab.Navigator>
  );
}
</file>

<file path="App.js">
import React from "react";
import Auth from "./Screens/Auth";
import NewUser from "./Screens/NewUser";
import Home from "./Screens/Home";
import Chat from "./Screens/Chat";
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";

const Stack = createNativeStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: false }}>
        <Stack.Screen name="Auth" component={Auth} />
        <Stack.Screen
          name="NewUser"
          component={NewUser}
          options={{ headerShown: true }}
        />
        <Stack.Screen name="Home" component={Home} />
        <Stack.Screen name="Chat" component={Chat} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}
</file>

<file path="metro.config.js">
// Learn more https://docs.expo.io/guides/customizing-metro
const { getDefaultConfig } = require('expo/metro-config');

const defaultConfig = getDefaultConfig(__dirname);

defaultConfig.resolver.extraNodeModules = {
  ...defaultConfig.resolver.extraNodeModules,
  stream: require.resolve('readable-stream'),
};

module.exports = defaultConfig;
</file>

<file path="package.json">
{
  "name": "whatsup_roukayachelly",
  "license": "0BSD",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "expo start --dev-client",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.1.0",
    "@react-native-async-storage/async-storage": "^2.1.2",
    "@react-navigation/material-bottom-tabs": "^6.2.29",
    "@react-navigation/native": "^6.1.18",
    "@react-navigation/native-stack": "^6.11.0",
    "@supabase/gotrue-js": "^2.69.1",
    "@types/react": "~19.0.10",
    "expo": "~53.0.8",
    "expo-crypto": "~14.1.4",
    "expo-document-picker": "^13.1.5",
    "expo-image-picker": "~16.1.4",
    "expo-location": "^18.1.5",
    "expo-status-bar": "~2.2.3",
    "firebase": "^11.7.1",
    "react": "19.0.0",
    "react-native": "0.79.2",
    "react-native-emoji-selector": "^0.2.0",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-get-random-values": "^1.11.0",
    "react-native-paper": "^5.14.0",
    "react-native-reanimated": "^3.17.5",
    "react-native-safe-area-context": "^5.4.0",
    "react-native-screens": "^4.10.0",
    "react-native-url-polyfill": "^2.0.0",
    "react-native-vector-icons": "^10.2.0",
    "readable-stream": "^4.7.0"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@react-native-community/cli": "^18.0.0",
    "@types/react": "^19.1.2",
    "expo-cli": "^6.3.12"
  },
  "private": true
}
</file>

<file path="Screens/Auth.js">
import { StatusBar } from "expo-status-bar";
import {
  BackHandler,
  Button,
  ImageBackground,
  StyleSheet,
  Text,
  TextInput,
  View,
} from "react-native";
import firebase from "../Config";
import { useState } from "react";
const database = firebase.database();
const ref_database = database.ref();
const ref_listaccount = ref_database.child("ListAccounts");
const auth = firebase.auth();

export default function Auth(props) {
  const [email, setemail] = useState("roukaya@gmail.com");
  const [password, setPassword] = useState("111111");
  return (
    <ImageBackground
      source={require("../assets/bg.jpg")}
      style={styles.container}
    >
      <View
        style={{
          alignItems: "center",
          justifyContent: "center",
          width: "98%",
          height: 350,
          backgroundColor: "rgba(0,0,0,0.6)",
          borderRadius: 12,
          padding: 20,
          shadowColor: "#000",
          shadowOffset: { width: 0, height: 2 },
          shadowOpacity: 0.25,
          shadowRadius: 3.84,
          elevation: 5,
        }}
      >
        <Text
          style={{
            color: "white",
            fontSize: 34,
            fontStyle: "italic",
            fontWeight: "bold",
            marginBottom: 20,
          }}
        >
          WELOCOME
        </Text>

        <TextInput
          value={email}
          onChangeText={(ch) => {
            setemail(ch);
          }}
          keyboardType="email-address"
          style={styles.input}
          placeholder="name@site.com"
        />

        <TextInput
          value={password}
          onChangeText={(ch) => setPassword(ch)}
          secureTextEntry={true}
          style={styles.input}
          placeholder="***password***"
        />

        <View style={{ flexDirection: "row", gap: 15, marginTop: 10 }}>
          <Button
            onPress={() => {
              auth
                .signInWithEmailAndPassword(email, password)
                .then(() => {
                  const currentUserid = auth.currentUser.uid;
                  {
                    /* to show the status of the user connected or not*/
                  }
                  const ref_myaccount = ref_listaccount.child(currentUserid);
                  ref_myaccount.update({
                    id: currentUserid,
                    connected: true,
                  });
                  props.navigation.replace("Home", {
                    currentUserid: currentUserid,
                  });
                })
                .catch((error) => {
                  alert(error.message);
                });
            }}
            color={"gray"}
            title="Submit"
          ></Button>
          <Button
            onPress={() => {
              BackHandler.exitApp();
            }}
            color={"gray"}
            title="Exit"
          ></Button>
        </View>
        <Text
          onPress={() => {
            props.navigation.navigate("NewUser");
          }}
          style={{
            marginTop: 15,
            width: "100%",
            textAlign: "right",
            marginRight: 15,
            fontSize: 14,
            fontWeight: "bold",
            color: "white",
            textDecorationLine: "underline",
          }}
        >
          Create new account
        </Text>
      </View>
      <StatusBar style="dark" />
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "yellow",
    justifyContent: "center",
  },
  input: {
    width: "95%",
    height: 50,
    backgroundColor: "#fff8",
    marginBottom: 15,
    borderWidth: 1,
    borderColor: "#075E54",
    borderRadius: 8,
    textAlign: "center",
    paddingHorizontal: 15,
    fontSize: 16,
  },
});
</file>

<file path="Screens/Home/ListProfils.js">
import React, { useEffect, useState } from "react";
import {
  Button,
  FlatList,
  Image,
  ImageBackground,
  Linking,
  Platform,
  StyleSheet,
  Text,
  TextInput,
  Alert,
  View,
} from "react-native";
import firebase from "../../Config";
import MaterialCommunityIcons from "react-native-vector-icons/MaterialCommunityIcons";

const database = firebase.database();
const ref_database = database.ref();
const ref_listaccount = ref_database.child("ListAccounts");
// Reference for deleted users
const ref_deletedUsers = ref_database.child("DeletedUsers");
// Reference for chat messages
const ref_listDiscussions = database.ref().child("List_discussions");

export default function ListProfils(props) {
  const currentUserid = props.route.params.currentUserid;
  const [data, setdata] = useState([]);
  const [deletedUsers, setDeletedUsers] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [lastMessages, setLastMessages] = useState({});

  // Récuperation des données
  useEffect(() => {
    ref_listaccount.on("value", (snapshot) => {
      var d = [];
      snapshot.forEach((one_account) => {
        if (one_account.val().id != currentUserid) d.push(one_account.val());
      });
      setdata(d);

      // Get last message for each user
      d.forEach((user) => {
        if (user && user.id) {
          const discid =
            currentUserid > user.id
              ? currentUserid + user.id
              : user.id + currentUserid;

          ref_listDiscussions
            .child(discid)
            .child("messages")
            .limitToLast(1)
            .on("value", (snapshot) => {
              if (snapshot.exists()) {
                snapshot.forEach((messageSnap) => {
                  setLastMessages((prev) => ({
                    ...prev,
                    [user.id]: messageSnap.val(),
                  }));
                });
              }
            });
        }
      });
    });

    // Get deleted users
    ref_deletedUsers.child(currentUserid).on("value", (snapshot) => {
      const deleted = [];
      if (snapshot.exists()) {
        snapshot.forEach((item) => {
          deleted.push(item.key);
        });
      }
      setDeletedUsers(deleted);
    });

    return () => {
      ref_listaccount.off();
      ref_deletedUsers.child(currentUserid).off();

      // Cleanup message listeners
      Object.keys(lastMessages).forEach((userId) => {
        const discid =
          currentUserid > userId
            ? currentUserid + userId
            : userId + currentUserid;
        ref_listDiscussions.child(discid).child("messages").off();
      });
    };
  }, []);

  //delete a user
  const deleteUser = (accountId) => {
    Alert.alert(
      "Delete User",
      "Are you sure you want to remove this user from your chats?",
      [
        { text: "Cancel", style: "cancel" },
        {
          text: "Delete",
          style: "destructive",
          onPress: () => {
            ref_deletedUsers
              .child(currentUserid)
              .child(accountId)
              .set(true)
              .then(() => {
                Alert.alert("Success", "User removed from your chat list");
              })
              .catch((error) => {
                Alert.alert("Error", "Failed to delete: " + error.message);
              });
          },
        },
      ]
    );
  };

  // handle undefined values
  const filteredData = data.filter((user) => {
    //if user is not deleted
    const notDeleted = !deletedUsers.includes(user.id);

    //  no search query
    if (!searchQuery) return notDeleted;

    // search for pseudo
    const matchesPseudo =
      user.pseudo &&
      user.pseudo.toLowerCase().includes(searchQuery.toLowerCase());

    //  search for numero
    const matchesNumero =
      user.numero && user.numero.toString().includes(searchQuery);

    // Return true if not deleted AND matches search
    return notDeleted && (matchesPseudo || matchesNumero);
  });

  return (
    <ImageBackground
      source={require("../../assets/bg.jpg")}
      style={styles.container}
    >
      <Text
        style={{
          fontSize: 26,
          color: "#075E54",
          fontWeight: "bold",
          marginVertical: 15,
        }}
      >
        List of Accounts
      </Text>

      {/* Search bar */}
      <TextInput
        style={{
          height: 50,
          width: "95%",
          backgroundColor: "#f5f5f5",
          marginBottom: 10,
          borderRadius: 25,
          paddingHorizontal: 15,
          fontSize: 16,
          borderWidth: 1,
          borderColor: "#ddd",
        }}
        placeholder="Search for a contact..."
        value={searchQuery}
        onChangeText={setSearchQuery}
      />

      {/* User list */}
      <FlatList
        data={filteredData}
        keyExtractor={(item) => item.id || Math.random().toString()}
        renderItem={({ item }) => {
          const color = item.connected ? "#25D366" : "#FF5252";
          const lastMsg = lastMessages[item.id] || {};

          return (
            <View
              style={{
                flexDirection: "row",
                justifyContent: "space-between",
                alignItems: "center",
                borderBottomWidth: 1,
                borderBottomColor: "#eee",
                padding: 10,
                margin: 5,
                backgroundColor: "white",
              }}
            >
              {/* User info section */}
              <View
                style={{ flexDirection: "row", flex: 1, alignItems: "center" }}
              >
                {/* status indicator */}
                <View style={{ position: "relative" }}>
                  <Image
                    source={
                      item.urlImage
                        ? { uri: item.urlImage }
                        : require("../../assets/profil.png")
                    }
                    style={{
                      width: 50,
                      height: 50,
                      borderRadius: 25,
                      borderWidth: 1,
                      borderColor: "#ddd",
                    }}
                  />

                  {/* Status indicator under image */}
                  <View
                    style={{
                      width: 12,
                      height: 12,
                      borderRadius: 6,
                      backgroundColor: color,
                      borderWidth: 1,
                      borderColor: "white",
                      position: "absolute",
                      bottom: 0,
                      right: 0,
                    }}
                  />
                </View>

                {/* User name, last message and number */}
                <View style={{ marginLeft: 10, flex: 1 }}>
                  <Text
                    onPress={() => {
                      props.navigation.navigate("Chat", {
                        currentid: currentUserid,
                        secondid: item.id,
                      });
                    }}
                    style={{
                      fontSize: 16,
                      fontWeight: "500",
                    }}
                  >
                    {item.pseudo || "Unknown User"}
                  </Text>

                  {/* Last message */}
                  <Text
                    numberOfLines={1}
                    style={{
                      color: "#666",
                      fontSize: 14,
                    }}
                  >
                    {lastMsg.body
                      ? (lastMsg.sender === currentUserid ? "You: " : "") +
                        lastMsg.body
                      : "No messages yet"}
                  </Text>

                  <Text
                    style={{
                      color: "#999",
                      fontSize: 12,
                    }}
                  >
                    {item.numero || "No number"}
                  </Text>
                </View>
              </View>

              {/* Action buttons */}
              <View style={{ flexDirection: "row", alignItems: "center" }}>
                {/* only show if there's a number */}
                {item.numero && (
                  <MaterialCommunityIcons
                    name="phone"
                    size={24}
                    color="#0C86E6"
                    style={{ padding: 8 }}
                    onPress={() => {
                      if (Platform.OS === "android") {
                        Linking.openURL(`tel:${item.numero}`);
                      } else {
                        Linking.openURL(`telprompt:${item.numero}`);
                      }
                    }}
                  />
                )}

                {/* Delete button */}
                <MaterialCommunityIcons
                  name="delete"
                  size={24}
                  color="#FF5252"
                  style={{ padding: 8 }}
                  onPress={() => deleteUser(item.id)}
                />
              </View>
            </View>
          );
        }}
        style={{ width: "98%" }}
        ListEmptyComponent={() => (
          <View
            style={{
              alignItems: "center",
              justifyContent: "center",
              marginTop: 50,
            }}
          >
            <MaterialCommunityIcons
              name="chat-remove"
              size={70}
              color="#CCCCCC"
            />
            <Text style={{ fontSize: 16, color: "#888888", marginTop: 15 }}>
              {searchQuery ? "No matches found" : "No chats available"}
            </Text>
          </View>
        )}
      />
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "white",
    alignItems: "center",
    justifyContent: "center",
  },
  profileImage: {
    width: 50,
    height: 50,
    borderRadius: 45,
    marginBottom: 10,
  },
});
</file>

<file path="Screens/Home/MyAccount.js">
import React, { useState, useEffect } from "react";
import {
  View,
  Button,
  Image,
  ImageBackground,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
} from "react-native";
import firebase, { SUPABASE_URL, SUPABASE_ANON_KEY } from "../../Config";
import * as ImagePicker from "expo-image-picker";

const auth = firebase.auth();
const database = firebase.database();
const ref_database = database.ref();
const ref_listaccount = ref_database.child("ListAccounts");

export default function MyAccount(props) {
  const currentUserid = props.route.params.currentUserid;

  const [pseudo, setPseudo] = useState("");
  const [numero, setNumero] = useState();

  const [isDefaultImage, setIsDefaultImage] = useState(true);
  const [localUriImage, setLocalUriImage] = useState();

  const ref_myaccount = ref_listaccount.child(currentUserid);

  useEffect(() => {
    ref_myaccount.on("value", (snapshot) => {
      const data = snapshot.val();
      console.log(data);
      setNumero(data.numero);
      setPseudo(data.pseudo);
    });
    return () => {
      ref_myaccount.off();
    };
  }, []);

  const uploadImageToStorage = async (urilocal) => {
    try {
      // Fetch the image as a blob
      const response = await fetch(urilocal);
      const blob = await response.blob();

      // Create a unique filename
      const filename = `${currentUserid}_${Date.now()}.jpg`;

      // Upload using Supabase Storage REST API
      const uploadResponse = await fetch(
        `${SUPABASE_URL}/storage/v1/object/lesimages/${filename}`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${SUPABASE_ANON_KEY}`,
            apikey: SUPABASE_ANON_KEY,
            "Content-Type": "image/jpeg",
          },
          body: blob,
        }
      );

      if (!uploadResponse.ok) {
        throw new Error("Upload failed");
      }

      // Get the public URL
      const publicUrl = `${SUPABASE_URL}/storage/v1/object/public/lesimages/${filename}`;

      return publicUrl;
    } catch (err) {
      console.error("Error uploading image:", err);
      Alert.alert("Error", "Failed to upload image");
      return null;
    }
  };

  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ["images"],
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setIsDefaultImage(false);
      setLocalUriImage(result.assets[0].uri);
    }
  };

  return (
    <ImageBackground
      source={require("../../assets/bg.jpg")}
      style={styles.container}
    >
      <Text
        style={{
          fontSize: 28, // ADDED: Larger font
          color: "#075E54", // ADDED: WhatsApp green
          fontWeight: "bold",
          marginBottom: 20, // ADDED: More space below
        }}
      >
        My Account
      </Text>
      <TouchableOpacity
        onPress={() => {
          pickImage();
        }}
      >
        <Image
          source={
            isDefaultImage
              ? require("../../assets/profil.png")
              : { uri: localUriImage }
          }
          style={{
            width: 200,
            height: 200,
            backgroundColor: "#0052",
            borderRadius: 100,
            marginBottom: 30,
            borderWidth: 1,
            borderColor: "#128C7E",
          }}
        />
      </TouchableOpacity>

      <TextInput
        onChangeText={(ch) => {
          setPseudo(ch);
        }}
        style={{
          color: "white",
          borderWidth: 1,
          borderColor: "white",
          height: 50,
          width: "80%",
          backgroundColor: "rgba(0,0,0,0.6)",
          marginBottom: 15,
          borderRadius: 8,
          textAlign: "center",
          fontSize: 16,
        }}
        placeholderTextColor={"white"}
        placeholder="Username"
        value={pseudo}
      />

      <TextInput
        onChangeText={(ch) => {
          setNumero(ch);
        }}
        style={{
          color: "white",
          borderWidth: 1,
          borderColor: "white",
          height: 50,
          width: "80%",
          backgroundColor: "rgba(0,0,0,0.6)",
          marginBottom: 15,
          borderRadius: 8,
          textAlign: "center",
          fontSize: 16,
        }}
        placeholderTextColor={"white"}
        placeholder="Phone Number"
        value={numero}
      />

      <View
        style={{
          width: "35%",
          marginTop: 20,
          marginBottom: 10,
        }}
      >
        {/* save button */}

        <View
          style={{
            marginBottom: 15,
            borderRadius: 8,
            overflow: "hidden",
            shadowColor: "#000",
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.2,
            shadowRadius: 3,
            elevation: 3,
          }}
        >
          <Button
            onPress={async () => {
              const urlImage = await uploadImageToStorage(localUriImage);
              console.log("urlImage", urlImage);

              const ref_account = ref_listaccount.child(currentUserid);
              await ref_account.update({
                id: currentUserid,
                pseudo,
                numero,
                urlImage: urlImage,
              });
              Alert.alert("Success", "Profile saved successfully!");
            }}
            title="SAVE PROFILE"
            color="#128C7E"
          />
        </View>

        {/* Logout button */}
        <View
          style={{
            borderRadius: 8,
            overflow: "hidden",
            shadowColor: "#000",
            shadowOffset: { width: 0, height: 2 },
            shadowOpacity: 0.2,
            shadowRadius: 3,
            elevation: 3,
          }}
        >
          <Button
            onPress={() => {
              auth.signOut().then(() => {
                props.navigation.replace("Auth");
                const ref_account = ref_listaccount.child(currentUserid);
                ref_account.update({
                  id: currentUserid,
                  connected: false,
                });
              });
            }}
            title="LOGOUT"
            color="#FF5252"
          />
        </View>
      </View>
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  input: {
    color: "white",
    borderWidth: 2,
    borderColor: "white",
    height: 50,
    width: "90%",
    backgroundColor: "#0007",
    marginBottom: 15,
    borderRadius: 4,
    textAlign: "center",
  },
  container: {
    flex: 1,
    backgroundColor: "white",
    alignItems: "center",
    justifyContent: "center",
  },
});
</file>

<file path="Screens/NewUser.js">
import { StatusBar } from "expo-status-bar";
import { useState } from "react";
import {
  Button,
  ImageBackground,
  StyleSheet,
  Text,
  TextInput,
  View,
} from "react-native";
import firebase from "../Config";
const auth = firebase.auth();
const database = firebase.database();
const ref_database = database.ref();
const ref_listaccount = ref_database.child("ListAccounts");

export default function NewUser(props) {
  const [email, setEmail] = useState();
  const [password, setPassword] = useState();
  const [confirmPassword, setConfirmPassword] = useState();

  return (
    <ImageBackground
      source={require("../assets/bg.jpg")}
      style={styles.container}
    >
      <View
        style={{
          alignItems: "center",
          justifyContent: "center",
          width: "98%",
          height: 350,
          backgroundColor: "rgba(0,0,0,0.65)",
          borderRadius: 10,
        }}
      >
        <Text
          style={{
            color: "white",
            fontSize: 34,
            fontStyle: "italic",
            fontWeight: "bold",
            marginBottom: 20,
          }}
        >
          Create account
        </Text>

        <TextInput
          onChangeText={(ch) => setEmail(ch)}
          keyboardType="email-address"
          style={styles.input}
          placeholder="name@site.com"
        ></TextInput>
        <TextInput
          onChangeText={(ch) => setPassword(ch)}
          style={styles.input}
          placeholder="***password***"
        ></TextInput>
        <TextInput
          onChangeText={(ch) => setConfirmPassword(ch)}
          style={styles.input}
          placeholder="***confirm password***"
        ></TextInput>

        <View style={{ flexDirection: "row", gap: 15, marginTop: 10 }}>
          <Button
            onPress={() => {
              if (password == confirmPassword) {
                auth
                  .createUserWithEmailAndPassword(email, password)
                  .then(() => {
                    const currentUserid = auth.currentUser.uid;
                    {
                      /* to show the status of the user connected or not*/
                    }
                    const ref_myaccount = ref_listaccount.child(currentUserid);
                    ref_myaccount.set({
                      id: currentUserid,
                      connected: true,
                    });

                    props.navigation.replace("MyAccount", {
                      currentUserid: currentUserid,
                    });
                  })
                  .catch((error) => {
                    alert(error);
                  });
              } else {
                alert("vérifier password");
              }
            }}
            color={"#666"}
            title="Create"
          ></Button>
          <Button
            onPress={() => {
              props.navigation.goBack();
            }}
            color={"#666"}
            title="Back"
          ></Button>
        </View>
      </View>
      <StatusBar style="dark" />
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "yellow",
    alignItems: "center",
    justifyContent: "center",
  },
  input: {
    width: "95%",
    height: 50,
    backgroundColor: "#fff7",
    marginBottom: 15,
    borderWidth: 1,
    borderColor: "#075E54",
    borderRadius: 8,
    textAlign: "center",
    fontSize: 16,
  },
});
</file>

</files>
